kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: kubeapi
    spec:
      containers:
      - name: apiserver
        image: gcr.io/google_containers/kube-apiserver-amd64:v1.9.2
        imagePullPolicy: IfNotPresent
        command:
        - kube-apiserver
        - --insecure-bind-address=0.0.0.0
        - --insecure-port=80
        - --requestheader-allowed-names=config-service,rbac-installer,cs-apiserver,authlinker,authadapter,config-service-controller,gateway,cs-uninstaller,cs-smoke-test
        - --requestheader-username-headers=X-Remote-User
        - --requestheader-group-headers=X-Remote-Group
        - --requestheader-extra-headers-prefix=X-Remote-Extra-
        - --admission-control=Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota
        - --enable-bootstrap-token-auth=true
        - --etcd-servers=http://etcd-client.od-test.svc:2379
        ports:
        - containerPort: 80
          name: "insecure"
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 80
            scheme: HTTP
          initialDelaySeconds: 15
          successThreshold: 1
          timeoutSeconds: 15
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 3000m
            memory: 4Gi

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "80"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  name: server
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: insecure
  selector:
    app: kubeapi
  type: LoadBalancer
