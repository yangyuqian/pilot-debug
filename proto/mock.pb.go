// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mock.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MockRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MockRequest) Reset()         { *m = MockRequest{} }
func (m *MockRequest) String() string { return proto.CompactTextString(m) }
func (*MockRequest) ProtoMessage()    {}
func (*MockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mock_8fa899aa517a4496, []int{0}
}
func (m *MockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MockRequest.Unmarshal(m, b)
}
func (m *MockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MockRequest.Marshal(b, m, deterministic)
}
func (dst *MockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockRequest.Merge(dst, src)
}
func (m *MockRequest) XXX_Size() int {
	return xxx_messageInfo_MockRequest.Size(m)
}
func (m *MockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MockRequest proto.InternalMessageInfo

func (m *MockRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type MockReply struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MockReply) Reset()         { *m = MockReply{} }
func (m *MockReply) String() string { return proto.CompactTextString(m) }
func (*MockReply) ProtoMessage()    {}
func (*MockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_mock_8fa899aa517a4496, []int{1}
}
func (m *MockReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MockReply.Unmarshal(m, b)
}
func (m *MockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MockReply.Marshal(b, m, deterministic)
}
func (dst *MockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockReply.Merge(dst, src)
}
func (m *MockReply) XXX_Size() int {
	return xxx_messageInfo_MockReply.Size(m)
}
func (m *MockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MockReply.DiscardUnknown(m)
}

var xxx_messageInfo_MockReply proto.InternalMessageInfo

func (m *MockReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*MockRequest)(nil), "pb.MockRequest")
	proto.RegisterType((*MockReply)(nil), "pb.MockReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MockClient is the client API for Mock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockClient interface {
	Say(ctx context.Context, in *MockRequest, opts ...grpc.CallOption) (*MockReply, error)
}

type mockClient struct {
	cc *grpc.ClientConn
}

func NewMockClient(cc *grpc.ClientConn) MockClient {
	return &mockClient{cc}
}

func (c *mockClient) Say(ctx context.Context, in *MockRequest, opts ...grpc.CallOption) (*MockReply, error) {
	out := new(MockReply)
	err := c.cc.Invoke(ctx, "/pb.Mock/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockServer is the server API for Mock service.
type MockServer interface {
	Say(context.Context, *MockRequest) (*MockReply, error)
}

func RegisterMockServer(s *grpc.Server, srv MockServer) {
	s.RegisterService(&_Mock_serviceDesc, srv)
}

func _Mock_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mock/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServer).Say(ctx, req.(*MockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Mock",
	HandlerType: (*MockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _Mock_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mock.proto",
}

func init() { proto.RegisterFile("mock.proto", fileDescriptor_mock_8fa899aa517a4496) }

var fileDescriptor_mock_8fa899aa517a4496 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcd, 0x4f, 0xce,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe7, 0xe2, 0xf6, 0xcd,
	0x4f, 0xce, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e,
	0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x64, 0xb9, 0x38, 0x21, 0x0a, 0x0a,
	0x72, 0x2a, 0x31, 0xa5, 0x8d, 0xf4, 0xb9, 0x58, 0x40, 0xd2, 0x42, 0xea, 0x5c, 0xcc, 0xc1, 0x89,
	0x95, 0x42, 0xfc, 0x7a, 0x05, 0x49, 0x7a, 0x48, 0x06, 0x4a, 0xf1, 0x22, 0x04, 0x0a, 0x72, 0x2a,
	0x95, 0x18, 0x92, 0xd8, 0xc0, 0x76, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x76, 0x48, 0x01,
	0x70, 0x89, 0x00, 0x00, 0x00,
}
